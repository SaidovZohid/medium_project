// Code generated by MockGen. DO NOT EDIT.
// Source: ../../genproto/post_service/category_service_grpc.pb.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	post_service "gitlab.com/medium-project/medium_api_gateway/genproto/post_service"
	grpc "google.golang.org/grpc"
)

// MockCategoryServiceClient is a mock of CategoryServiceClient interface.
type MockCategoryServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceClientMockRecorder
}

// MockCategoryServiceClientMockRecorder is the mock recorder for MockCategoryServiceClient.
type MockCategoryServiceClientMockRecorder struct {
	mock *MockCategoryServiceClient
}

// NewMockCategoryServiceClient creates a new mock instance.
func NewMockCategoryServiceClient(ctrl *gomock.Controller) *MockCategoryServiceClient {
	mock := &MockCategoryServiceClient{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryServiceClient) EXPECT() *MockCategoryServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryServiceClient) Create(ctx context.Context, in *post_service.Category, opts ...grpc.CallOption) (*post_service.Category, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*post_service.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockCategoryServiceClient) Delete(ctx context.Context, in *post_service.GetCategoryRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockCategoryServiceClient) Get(ctx context.Context, in *post_service.GetCategoryRequest, opts ...grpc.CallOption) (*post_service.Category, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*post_service.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCategoryServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategoryServiceClient)(nil).Get), varargs...)
}

// GetAll mocks base method.
func (m *MockCategoryServiceClient) GetAll(ctx context.Context, in *post_service.GetAllCategoryParamsReq, opts ...grpc.CallOption) (*post_service.GetAllCategoryResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*post_service.GetAllCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCategoryServiceClientMockRecorder) GetAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCategoryServiceClient)(nil).GetAll), varargs...)
}

// Update mocks base method.
func (m *MockCategoryServiceClient) Update(ctx context.Context, in *post_service.Category, opts ...grpc.CallOption) (*post_service.Category, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*post_service.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryServiceClient)(nil).Update), varargs...)
}

// MockCategoryServiceServer is a mock of CategoryServiceServer interface.
type MockCategoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCategoryServiceServerMockRecorder
}

// MockCategoryServiceServerMockRecorder is the mock recorder for MockCategoryServiceServer.
type MockCategoryServiceServerMockRecorder struct {
	mock *MockCategoryServiceServer
}

// NewMockCategoryServiceServer creates a new mock instance.
func NewMockCategoryServiceServer(ctrl *gomock.Controller) *MockCategoryServiceServer {
	mock := &MockCategoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockCategoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCategoryServiceServer) EXPECT() *MockCategoryServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCategoryServiceServer) Create(arg0 context.Context, arg1 *post_service.Category) (*post_service.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCategoryServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCategoryServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCategoryServiceServer) Delete(arg0 context.Context, arg1 *post_service.GetCategoryRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCategoryServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCategoryServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockCategoryServiceServer) Get(arg0 context.Context, arg1 *post_service.GetCategoryRequest) (*post_service.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCategoryServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCategoryServiceServer)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockCategoryServiceServer) GetAll(arg0 context.Context, arg1 *post_service.GetAllCategoryParamsReq) (*post_service.GetAllCategoryResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*post_service.GetAllCategoryResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCategoryServiceServerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCategoryServiceServer)(nil).GetAll), arg0, arg1)
}

// Update mocks base method.
func (m *MockCategoryServiceServer) Update(arg0 context.Context, arg1 *post_service.Category) (*post_service.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCategoryServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCategoryServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedCategoryServiceServer mocks base method.
func (m *MockCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCategoryServiceServer")
}

// mustEmbedUnimplementedCategoryServiceServer indicates an expected call of mustEmbedUnimplementedCategoryServiceServer.
func (mr *MockCategoryServiceServerMockRecorder) mustEmbedUnimplementedCategoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCategoryServiceServer", reflect.TypeOf((*MockCategoryServiceServer)(nil).mustEmbedUnimplementedCategoryServiceServer))
}

// MockUnsafeCategoryServiceServer is a mock of UnsafeCategoryServiceServer interface.
type MockUnsafeCategoryServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCategoryServiceServerMockRecorder
}

// MockUnsafeCategoryServiceServerMockRecorder is the mock recorder for MockUnsafeCategoryServiceServer.
type MockUnsafeCategoryServiceServerMockRecorder struct {
	mock *MockUnsafeCategoryServiceServer
}

// NewMockUnsafeCategoryServiceServer creates a new mock instance.
func NewMockUnsafeCategoryServiceServer(ctrl *gomock.Controller) *MockUnsafeCategoryServiceServer {
	mock := &MockUnsafeCategoryServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCategoryServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCategoryServiceServer) EXPECT() *MockUnsafeCategoryServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCategoryServiceServer mocks base method.
func (m *MockUnsafeCategoryServiceServer) mustEmbedUnimplementedCategoryServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCategoryServiceServer")
}

// mustEmbedUnimplementedCategoryServiceServer indicates an expected call of mustEmbedUnimplementedCategoryServiceServer.
func (mr *MockUnsafeCategoryServiceServerMockRecorder) mustEmbedUnimplementedCategoryServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCategoryServiceServer", reflect.TypeOf((*MockUnsafeCategoryServiceServer)(nil).mustEmbedUnimplementedCategoryServiceServer))
}
