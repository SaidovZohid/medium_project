// Code generated by MockGen. DO NOT EDIT.
// Source: ../../genproto/post_service/comment_service_grpc.pb.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	post_service "gitlab.com/medium-project/medium_api_gateway/genproto/post_service"
	grpc "google.golang.org/grpc"
)

// MockCommentServiceClient is a mock of CommentServiceClient interface.
type MockCommentServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceClientMockRecorder
}

// MockCommentServiceClientMockRecorder is the mock recorder for MockCommentServiceClient.
type MockCommentServiceClientMockRecorder struct {
	mock *MockCommentServiceClient
}

// NewMockCommentServiceClient creates a new mock instance.
func NewMockCommentServiceClient(ctrl *gomock.Controller) *MockCommentServiceClient {
	mock := &MockCommentServiceClient{ctrl: ctrl}
	mock.recorder = &MockCommentServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentServiceClient) EXPECT() *MockCommentServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentServiceClient) Create(ctx context.Context, in *post_service.Comment, opts ...grpc.CallOption) (*post_service.Comment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*post_service.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockCommentServiceClient) Delete(ctx context.Context, in *post_service.DeleteCommentRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentServiceClient)(nil).Delete), varargs...)
}

// GetAll mocks base method.
func (m *MockCommentServiceClient) GetAll(ctx context.Context, in *post_service.GetAllCommentsParamsReq, opts ...grpc.CallOption) (*post_service.GetAllCommentsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*post_service.GetAllCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCommentServiceClientMockRecorder) GetAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCommentServiceClient)(nil).GetAll), varargs...)
}

// Update mocks base method.
func (m *MockCommentServiceClient) Update(ctx context.Context, in *post_service.Comment, opts ...grpc.CallOption) (*post_service.Comment, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*post_service.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommentServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentServiceClient)(nil).Update), varargs...)
}

// MockCommentServiceServer is a mock of CommentServiceServer interface.
type MockCommentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockCommentServiceServerMockRecorder
}

// MockCommentServiceServerMockRecorder is the mock recorder for MockCommentServiceServer.
type MockCommentServiceServerMockRecorder struct {
	mock *MockCommentServiceServer
}

// NewMockCommentServiceServer creates a new mock instance.
func NewMockCommentServiceServer(ctrl *gomock.Controller) *MockCommentServiceServer {
	mock := &MockCommentServiceServer{ctrl: ctrl}
	mock.recorder = &MockCommentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommentServiceServer) EXPECT() *MockCommentServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCommentServiceServer) Create(arg0 context.Context, arg1 *post_service.Comment) (*post_service.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCommentServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCommentServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockCommentServiceServer) Delete(arg0 context.Context, arg1 *post_service.DeleteCommentRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockCommentServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCommentServiceServer)(nil).Delete), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockCommentServiceServer) GetAll(arg0 context.Context, arg1 *post_service.GetAllCommentsParamsReq) (*post_service.GetAllCommentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*post_service.GetAllCommentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockCommentServiceServerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockCommentServiceServer)(nil).GetAll), arg0, arg1)
}

// Update mocks base method.
func (m *MockCommentServiceServer) Update(arg0 context.Context, arg1 *post_service.Comment) (*post_service.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCommentServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCommentServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedCommentServiceServer mocks base method.
func (m *MockCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCommentServiceServer")
}

// mustEmbedUnimplementedCommentServiceServer indicates an expected call of mustEmbedUnimplementedCommentServiceServer.
func (mr *MockCommentServiceServerMockRecorder) mustEmbedUnimplementedCommentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCommentServiceServer", reflect.TypeOf((*MockCommentServiceServer)(nil).mustEmbedUnimplementedCommentServiceServer))
}

// MockUnsafeCommentServiceServer is a mock of UnsafeCommentServiceServer interface.
type MockUnsafeCommentServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeCommentServiceServerMockRecorder
}

// MockUnsafeCommentServiceServerMockRecorder is the mock recorder for MockUnsafeCommentServiceServer.
type MockUnsafeCommentServiceServerMockRecorder struct {
	mock *MockUnsafeCommentServiceServer
}

// NewMockUnsafeCommentServiceServer creates a new mock instance.
func NewMockUnsafeCommentServiceServer(ctrl *gomock.Controller) *MockUnsafeCommentServiceServer {
	mock := &MockUnsafeCommentServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeCommentServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeCommentServiceServer) EXPECT() *MockUnsafeCommentServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedCommentServiceServer mocks base method.
func (m *MockUnsafeCommentServiceServer) mustEmbedUnimplementedCommentServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedCommentServiceServer")
}

// mustEmbedUnimplementedCommentServiceServer indicates an expected call of mustEmbedUnimplementedCommentServiceServer.
func (mr *MockUnsafeCommentServiceServerMockRecorder) mustEmbedUnimplementedCommentServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedCommentServiceServer", reflect.TypeOf((*MockUnsafeCommentServiceServer)(nil).mustEmbedUnimplementedCommentServiceServer))
}
