// Code generated by MockGen. DO NOT EDIT.
// Source: ../../genproto/post_service/like_service_grpc.pb.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	post_service "gitlab.com/medium-project/medium_api_gateway/genproto/post_service"
	grpc "google.golang.org/grpc"
)

// MockLikeServiceClient is a mock of LikeServiceClient interface.
type MockLikeServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockLikeServiceClientMockRecorder
}

// MockLikeServiceClientMockRecorder is the mock recorder for MockLikeServiceClient.
type MockLikeServiceClientMockRecorder struct {
	mock *MockLikeServiceClient
}

// NewMockLikeServiceClient creates a new mock instance.
func NewMockLikeServiceClient(ctrl *gomock.Controller) *MockLikeServiceClient {
	mock := &MockLikeServiceClient{ctrl: ctrl}
	mock.recorder = &MockLikeServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeServiceClient) EXPECT() *MockLikeServiceClientMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockLikeServiceClient) CreateOrUpdate(ctx context.Context, in *post_service.Like, opts ...grpc.CallOption) (*post_service.Like, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateOrUpdate", varargs...)
	ret0, _ := ret[0].(*post_service.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockLikeServiceClientMockRecorder) CreateOrUpdate(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockLikeServiceClient)(nil).CreateOrUpdate), varargs...)
}

// Get mocks base method.
func (m *MockLikeServiceClient) Get(ctx context.Context, in *post_service.GetLikeRequest, opts ...grpc.CallOption) (*post_service.Like, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*post_service.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLikeServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLikeServiceClient)(nil).Get), varargs...)
}

// GetLikesDislikesCount mocks base method.
func (m *MockLikeServiceClient) GetLikesDislikesCount(ctx context.Context, in *post_service.GetLikesRequest, opts ...grpc.CallOption) (*post_service.LikesDislikesCountResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLikesDislikesCount", varargs...)
	ret0, _ := ret[0].(*post_service.LikesDislikesCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesDislikesCount indicates an expected call of GetLikesDislikesCount.
func (mr *MockLikeServiceClientMockRecorder) GetLikesDislikesCount(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesDislikesCount", reflect.TypeOf((*MockLikeServiceClient)(nil).GetLikesDislikesCount), varargs...)
}

// MockLikeServiceServer is a mock of LikeServiceServer interface.
type MockLikeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockLikeServiceServerMockRecorder
}

// MockLikeServiceServerMockRecorder is the mock recorder for MockLikeServiceServer.
type MockLikeServiceServerMockRecorder struct {
	mock *MockLikeServiceServer
}

// NewMockLikeServiceServer creates a new mock instance.
func NewMockLikeServiceServer(ctrl *gomock.Controller) *MockLikeServiceServer {
	mock := &MockLikeServiceServer{ctrl: ctrl}
	mock.recorder = &MockLikeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLikeServiceServer) EXPECT() *MockLikeServiceServerMockRecorder {
	return m.recorder
}

// CreateOrUpdate mocks base method.
func (m *MockLikeServiceServer) CreateOrUpdate(arg0 context.Context, arg1 *post_service.Like) (*post_service.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockLikeServiceServerMockRecorder) CreateOrUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockLikeServiceServer)(nil).CreateOrUpdate), arg0, arg1)
}

// Get mocks base method.
func (m *MockLikeServiceServer) Get(arg0 context.Context, arg1 *post_service.GetLikeRequest) (*post_service.Like, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Like)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockLikeServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockLikeServiceServer)(nil).Get), arg0, arg1)
}

// GetLikesDislikesCount mocks base method.
func (m *MockLikeServiceServer) GetLikesDislikesCount(arg0 context.Context, arg1 *post_service.GetLikesRequest) (*post_service.LikesDislikesCountResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesDislikesCount", arg0, arg1)
	ret0, _ := ret[0].(*post_service.LikesDislikesCountResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesDislikesCount indicates an expected call of GetLikesDislikesCount.
func (mr *MockLikeServiceServerMockRecorder) GetLikesDislikesCount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesDislikesCount", reflect.TypeOf((*MockLikeServiceServer)(nil).GetLikesDislikesCount), arg0, arg1)
}

// mustEmbedUnimplementedLikeServiceServer mocks base method.
func (m *MockLikeServiceServer) mustEmbedUnimplementedLikeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLikeServiceServer")
}

// mustEmbedUnimplementedLikeServiceServer indicates an expected call of mustEmbedUnimplementedLikeServiceServer.
func (mr *MockLikeServiceServerMockRecorder) mustEmbedUnimplementedLikeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLikeServiceServer", reflect.TypeOf((*MockLikeServiceServer)(nil).mustEmbedUnimplementedLikeServiceServer))
}

// MockUnsafeLikeServiceServer is a mock of UnsafeLikeServiceServer interface.
type MockUnsafeLikeServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeLikeServiceServerMockRecorder
}

// MockUnsafeLikeServiceServerMockRecorder is the mock recorder for MockUnsafeLikeServiceServer.
type MockUnsafeLikeServiceServerMockRecorder struct {
	mock *MockUnsafeLikeServiceServer
}

// NewMockUnsafeLikeServiceServer creates a new mock instance.
func NewMockUnsafeLikeServiceServer(ctrl *gomock.Controller) *MockUnsafeLikeServiceServer {
	mock := &MockUnsafeLikeServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeLikeServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeLikeServiceServer) EXPECT() *MockUnsafeLikeServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedLikeServiceServer mocks base method.
func (m *MockUnsafeLikeServiceServer) mustEmbedUnimplementedLikeServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedLikeServiceServer")
}

// mustEmbedUnimplementedLikeServiceServer indicates an expected call of mustEmbedUnimplementedLikeServiceServer.
func (mr *MockUnsafeLikeServiceServerMockRecorder) mustEmbedUnimplementedLikeServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedLikeServiceServer", reflect.TypeOf((*MockUnsafeLikeServiceServer)(nil).mustEmbedUnimplementedLikeServiceServer))
}
