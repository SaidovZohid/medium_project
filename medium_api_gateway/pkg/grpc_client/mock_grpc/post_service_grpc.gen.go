// Code generated by MockGen. DO NOT EDIT.
// Source: ../../genproto/post_service/post_service_grpc.pb.go

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	empty "github.com/golang/protobuf/ptypes/empty"
	post_service "gitlab.com/medium-project/medium_api_gateway/genproto/post_service"
	grpc "google.golang.org/grpc"
)

// MockPostServiceClient is a mock of PostServiceClient interface.
type MockPostServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceClientMockRecorder
}

// MockPostServiceClientMockRecorder is the mock recorder for MockPostServiceClient.
type MockPostServiceClientMockRecorder struct {
	mock *MockPostServiceClient
}

// NewMockPostServiceClient creates a new mock instance.
func NewMockPostServiceClient(ctrl *gomock.Controller) *MockPostServiceClient {
	mock := &MockPostServiceClient{ctrl: ctrl}
	mock.recorder = &MockPostServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceClient) EXPECT() *MockPostServiceClientMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostServiceClient) Create(ctx context.Context, in *post_service.Post, opts ...grpc.CallOption) (*post_service.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Create", varargs...)
	ret0, _ := ret[0].(*post_service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostServiceClientMockRecorder) Create(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostServiceClient)(nil).Create), varargs...)
}

// Delete mocks base method.
func (m *MockPostServiceClient) Delete(ctx context.Context, in *post_service.GetPostRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPostServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostServiceClient)(nil).Delete), varargs...)
}

// Get mocks base method.
func (m *MockPostServiceClient) Get(ctx context.Context, in *post_service.GetPostRequest, opts ...grpc.CallOption) (*post_service.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*post_service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPostServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPostServiceClient)(nil).Get), varargs...)
}

// GetAll mocks base method.
func (m *MockPostServiceClient) GetAll(ctx context.Context, in *post_service.GetPostsParamsReq, opts ...grpc.CallOption) (*post_service.GetAllPostResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*post_service.GetAllPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPostServiceClientMockRecorder) GetAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostServiceClient)(nil).GetAll), varargs...)
}

// Update mocks base method.
func (m *MockPostServiceClient) Update(ctx context.Context, in *post_service.Post, opts ...grpc.CallOption) (*post_service.Post, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*post_service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPostServiceClientMockRecorder) Update(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostServiceClient)(nil).Update), varargs...)
}

// MockPostServiceServer is a mock of PostServiceServer interface.
type MockPostServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockPostServiceServerMockRecorder
}

// MockPostServiceServerMockRecorder is the mock recorder for MockPostServiceServer.
type MockPostServiceServerMockRecorder struct {
	mock *MockPostServiceServer
}

// NewMockPostServiceServer creates a new mock instance.
func NewMockPostServiceServer(ctrl *gomock.Controller) *MockPostServiceServer {
	mock := &MockPostServiceServer{ctrl: ctrl}
	mock.recorder = &MockPostServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPostServiceServer) EXPECT() *MockPostServiceServerMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPostServiceServer) Create(arg0 context.Context, arg1 *post_service.Post) (*post_service.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPostServiceServerMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPostServiceServer)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockPostServiceServer) Delete(arg0 context.Context, arg1 *post_service.GetPostRequest) (*empty.Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*empty.Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockPostServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPostServiceServer)(nil).Delete), arg0, arg1)
}

// Get mocks base method.
func (m *MockPostServiceServer) Get(arg0 context.Context, arg1 *post_service.GetPostRequest) (*post_service.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPostServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPostServiceServer)(nil).Get), arg0, arg1)
}

// GetAll mocks base method.
func (m *MockPostServiceServer) GetAll(arg0 context.Context, arg1 *post_service.GetPostsParamsReq) (*post_service.GetAllPostResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*post_service.GetAllPostResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockPostServiceServerMockRecorder) GetAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPostServiceServer)(nil).GetAll), arg0, arg1)
}

// Update mocks base method.
func (m *MockPostServiceServer) Update(arg0 context.Context, arg1 *post_service.Post) (*post_service.Post, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*post_service.Post)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPostServiceServerMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPostServiceServer)(nil).Update), arg0, arg1)
}

// mustEmbedUnimplementedPostServiceServer mocks base method.
func (m *MockPostServiceServer) mustEmbedUnimplementedPostServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostServiceServer")
}

// mustEmbedUnimplementedPostServiceServer indicates an expected call of mustEmbedUnimplementedPostServiceServer.
func (mr *MockPostServiceServerMockRecorder) mustEmbedUnimplementedPostServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostServiceServer", reflect.TypeOf((*MockPostServiceServer)(nil).mustEmbedUnimplementedPostServiceServer))
}

// MockUnsafePostServiceServer is a mock of UnsafePostServiceServer interface.
type MockUnsafePostServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePostServiceServerMockRecorder
}

// MockUnsafePostServiceServerMockRecorder is the mock recorder for MockUnsafePostServiceServer.
type MockUnsafePostServiceServerMockRecorder struct {
	mock *MockUnsafePostServiceServer
}

// NewMockUnsafePostServiceServer creates a new mock instance.
func NewMockUnsafePostServiceServer(ctrl *gomock.Controller) *MockUnsafePostServiceServer {
	mock := &MockUnsafePostServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePostServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePostServiceServer) EXPECT() *MockUnsafePostServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPostServiceServer mocks base method.
func (m *MockUnsafePostServiceServer) mustEmbedUnimplementedPostServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPostServiceServer")
}

// mustEmbedUnimplementedPostServiceServer indicates an expected call of mustEmbedUnimplementedPostServiceServer.
func (mr *MockUnsafePostServiceServerMockRecorder) mustEmbedUnimplementedPostServiceServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPostServiceServer", reflect.TypeOf((*MockUnsafePostServiceServer)(nil).mustEmbedUnimplementedPostServiceServer))
}
